[user]
	name = Jean-Marcel Belmont
	email = jbelmont@foodlogiq.com
[alias]
    lg = log --all --graph --oneline --decorate
	s = status -s
	pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pr-clean = "!git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
	spr = "!f() { git fetch -fu ${2:-origin} refs/pull-requests/$1/from:pr/$1 && git checkout pr/$1; }; f"
   	jiralist = "!f() { git log origin/master...release/$1 --oneline --no-merges --pretty=format:'* %s' | egrep \"([A-Z]{2,}-)([0-9]+)\"; }; f"
    unstage-files = "!f() { git restore --staged $(git status --porcelain | sed -E 's/[A-Z]{1}[[:space:]]+//g' | xargs); }; f"
	nuke = "!f() { git checkout $(git status | grep modified | awk '{print $2}' | xargs); }; f"
	gc-pull = "!fn() { git gc; git pull; }; fn"
	local-list = "!fn() { git config --local --list; }; fn;"
	global-list = "!fn() { git config --global --list; }; fn;"
	system-list = "!fn() { git config --system --list; }; fn;"
	commit-on-top-of-log = "!f() { git log --pretty=oneline | head -1 | cut -c 1-40 | git show; }; f;"
	open-remote-url = "!fn() { open $(git config --local --list | grep 'remote.origin.url' | awk '{split($0,a,\"=\"); print a[2]}'); }; fn"
	second-entry-from-reflog = "!fn() { git log --reflog --pretty=oneline | head -2 | awk '{print $1}' | tail -1; }; fn;"
    checkout-to-feature = "!fn() { git checkout $(git branch | grep $(echo $1 | tr '[:lower:]' '[:upper:]') | tr -d '\n'); }; fn"
    push-current-branch-to-remote = "!fn() { git push -u origin $(git rev-parse --abbrev-ref HEAD); }; fn;"
    drop-commit = "!fn() { git rebase --onto $1^ $1; }; fn"
    soft-drop-top-commit = "!fn() { git reset --soft HEAD~1; }; fn;"
    top-commit = "!fn () { git log | head -1 | awk '{ print $2 }'; }; fn;"
    open-github-pages-for-repo = !sh ~/bin/open-current-gitbook-in-repo.sh
    open-current-pr = !sh ~/bin/open-current-pr.sh
    show-recently-checked-out-branches = "!fn() { git reflog | grep -E \"moving from ([[:alnum:][:punct:]]+)\" | awk '{ print $6 }'; }; fn;"
    pick-log-commit-changes = !sh ~/bin/show-log-per-certain-commit.sh
    show-untracked-changes = "!fn () { git status -s | awk '/UU / { print }'; }; fn"
    show-unmerged-changes = !sh ~/bin/show-unmerged-changes.sh
    parent = "!git show-branch | grep '*' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"
    show-merged-branches = "!fn() { git branch -r --merged | grep -vE \"HEAD|master|release\" | awk '{ sub(\"origin/\", \"\"); print $1 }'; }; fn;"
    delete-merged-branches = !sh ~/bin/delete-merged-branches.sh
    latest-tag = "!fn() { git tag -l --sort=-creatordate | head -n 1; }; fn;"
    current-branch= "!fn() { git rev-parse --abbrev-ref HEAD; }; fn;"
    nice-log = "!fn() { git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit; }; fn;"

[core]
	editor = nvim
	excludesfile = /Users/jean-marcelbelmont/.gitignore_global
[pull]
	rebase = true
[push]
	default = simple
[credential]
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[merge]
	tool = code
[filesystem "Oracle Corporation|11.0.4|/dev/disk1s5"]
	timestampResolution = 10000 nanoseconds
	minRacyThreshold = 0 nanoseconds
